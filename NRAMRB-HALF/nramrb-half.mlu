#include "mlu.h"

#define __BANG_ARCH__ 200
#include "__clang_bang_math.h"
#include "__clang_bang_intrinsics.h"

typedef half value_type; 

#define maxNramMem 262144
#define maxNramSize(type) maxNramMem / sizeof(type)
#define maxLen 8192
#define baseLen (sizeof(double) / sizeof(value_type) * 16)
#define formatLen(sz) ((sz) / baseLen + ((sz) % baseLen? 1: 0)) * baseLen


__mlu_func__ int realId(int tid, int workingKernelNum) {
    if (workingKernelNum == 1) return tid? -1: 0;
    else if (workingKernelNum == 2) return (int[]){0,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1}[tid];
    else if (workingKernelNum == 4) return (int[]){0,-1,-1,-1,1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,-1}[tid];
    else if (workingKernelNum == 8) return (int[]){0,1,-1,-1,2,3,-1,-1,4,5,-1,-1,6,7,-1,-1}[tid];
    else if (workingKernelNum == 16) return tid;
    else return -1;
}


__mlu_entry__ void lu_kernel(value_type*A, int n, int i, int RowBlockSz, int workingKernelNum) {
    const int rid = realId(taskIdX, workingKernelNum);
    if (rid < 0 || rid + i + 1 >= n) return;

    __nram__ value_type Ajx[maxLen];
    __nram__ value_type Aix[maxLen];
    __nram__ value_type Aji[baseLen];

    __memcpy(Aix, A + i * n + i + 1, sizeof(value_type) * (n - i - 1), GDRAM2NRAM);

    for (int k = i; k < i + RowBlockSz; ++k) {
        int j = rid * RowBlockSz + k + 1;
        if (j >= n) return;

        A[j * n + i] /= A[i * n + i];

        __nramset_half(Aji, baseLen, A[j * n + i]);
        __memcpy(Ajx, A + j * n + i + 1, sizeof(value_type) * (n - i - 1), GDRAM2NRAM);

        __bang_cycle_mul(Aix, Aix, Aji, formatLen(n - i - 1), baseLen);
        __bang_sub(Ajx, Ajx, Aix, formatLen(n - i - 1));

        __memcpy(A + j * n + i + 1, Ajx, sizeof(value_type) * (n - i - 1), NRAM2GDRAM);
    }
}
